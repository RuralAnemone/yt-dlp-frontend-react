"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.outputType = exports.downloadMergeVideo = exports.mergevideo = exports.downloadExtractAudio = exports.extractaudio = exports.downloadAudioandvideo = exports.audioandvideo = exports.downloadAudioonly = exports.audioonly = exports.downloadVideoonly = exports.videoonly = void 0;
const zod_1 = require("zod");
const videoQuality = zod_1.z.enum([
    "2160p",
    "1440p",
    "1080p",
    "720p",
    "480p",
    "360p",
    "240p",
    "144p",
    "highest",
    "lowest",
]);
const outputType = zod_1.z
    .string()
    .min(1)
    .or(zod_1.z
    .object({
    outDir: zod_1.z.string().min(1),
    fileName: zod_1.z
        .string()
        .min(1)
        .or(zod_1.z.enum(["default"]))
        .optional(),
})
    .optional());
exports.outputType = outputType;
exports.videoonly = zod_1.z.object({
    filter: zod_1.z.enum(["videoonly"]),
    quality: videoQuality.optional(),
    format: zod_1.z.enum(["mp4", "webm"]).optional(),
    embedSubs: zod_1.z.boolean().optional(),
    embedThumbnail: zod_1.z.boolean().optional(),
    defaultQuality: zod_1.z.enum(["highest", "lowest", "none"]).optional(),
});
exports.downloadVideoonly = exports.videoonly.extend({
    output: outputType,
});
exports.audioonly = zod_1.z.object({
    filter: zod_1.z.enum(["audioonly"]),
    quality: zod_1.z.enum(["highest", "lowest"]).optional(),
});
exports.downloadAudioonly = exports.audioonly.extend({
    output: outputType,
});
exports.audioandvideo = zod_1.z.object({
    filter: zod_1.z.enum(["audioandvideo"]),
    quality: zod_1.z.enum(["highest", "lowest"]).optional(),
    embedSubs: zod_1.z.boolean().optional(),
    embedThumbnail: zod_1.z.boolean().optional(),
});
exports.downloadAudioandvideo = exports.audioandvideo.extend({
    output: outputType,
});
exports.extractaudio = zod_1.z.object({
    filter: zod_1.z.enum(["extractaudio"]),
    quality: zod_1.z.number().nonnegative().optional(),
    format: zod_1.z
        .enum(["aac", "flac", "mp3", "m4a", "opus", "vorbis", "wav", "alac"])
        .optional(),
});
exports.downloadExtractAudio = exports.extractaudio.extend({
    output: outputType,
});
exports.mergevideo = zod_1.z.object({
    filter: zod_1.z.enum(["mergevideo"]),
    quality: videoQuality.optional(),
    format: zod_1.z.enum(["mkv", "mp4", "ogg", "webm", "flv"]).optional(),
    defaultQuality: zod_1.z.enum(["highest", "lowest", "none"]).optional(),
    embedSubs: zod_1.z.boolean().optional(),
    embedThumbnail: zod_1.z.boolean().optional(),
});
exports.downloadMergeVideo = exports.mergevideo.extend({
    output: outputType,
});
// .regex(
//     /(\.aac|\.flac|\.mp3|\.m4a|\.opus|\.vorbis|\.wav\.mkv|\.mp4|\.ogg|\.webm|\.flv)$/g,
//     "File extension not valid"
// ),
//# sourceMappingURL=schema.js.map